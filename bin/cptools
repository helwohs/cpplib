#!/usr/bin/env python3

import os
import enum
import shutil
import argparse


cpplib_dir = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    "include",
    "cpplib"
)

@enum.unique
class ContestKind(enum.Enum):
    CODEFORCES = enum.auto()

    @classmethod
    def from_str(cls, value: str):
        value = value.lower()
        if value == "codeforces":
            return cls.CODEFORCES
        else:
            raise Exception("unknown contest kind")

def create_environment(args):
    env_dir = os.path.join(os.getcwd(), args.name)

    if not os.path.exists(env_dir):
        os.mkdir(env_dir)
    else:
        assert os.path.isdir(env_dir)

    with open(os.path.join(cpplib_dir, "header.hpp"), "r") as f:
        content = "".join(f.readlines()[1:])

    content += (
        "\n"
        "int32_t main(){\n"
        "    desync();\n"
        "    return 0;\n"
        "}\n"
    )
    print(content)

    if args.contest is ContestKind.CODEFORCES:
        with open(os.path.join(env_dir, "a.cpp"), "w") as f:
            f.write(content)
        for q in "bcde":
            shutil.copy(
                os.path.join(env_dir, "a.cpp"),
                os.path.join(env_dir, f"{q}.cpp")
            )
    else:
        raise NotImplementedError

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="cptools",
        description="facilitates the use of the c++ competitive programming personal library"
    )
    subparsers = parser.add_subparsers(title="commands")

    parser_env = subparsers.add_parser(
        "environment",
        aliases=["env"],
        help="create a contest environment"
    )
    parser_env.set_defaults(func=create_environment)
    parser_env.add_argument(
        "name",
        type=str,
        help="set the environment directory name"
    )
    parser_env.add_argument(
        "-c",
        "--contest",
        nargs=1,
        default="codeforces",
        type=ContestKind.from_str,
        choices=["codeforces"],
        help="set the contest kind"
    )

    args = parser.parse_args()
    try:
        args.func(args)
    except AttributeError:
        pass
